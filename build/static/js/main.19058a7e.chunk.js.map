{"version":3,"sources":["features/Home/salesDataSlice.js","features/ProductInfo/ProductInfo.js","features/SalesTable/SalesTable.columns.js","features/SalesTable/SalesTable.js","features/Home/Home.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["salesDataSlice","createSlice","name","initialState","salesData","loading","reducers","fetchDataPending","state","fetchDataSuccess","action","payload","actions","useStyles","makeStyles","theme","image","width","typography","padding","spacing","chipBorder","borderRadius","margin","iconWidth","minWidth","ProductInfo","classes","navigations","Box","className","src","alt","Typography","align","variant","title","color","subtitle","Divider","m","tags","map","tag","index","Chip","label","key","List","component","item","ListItem","ListItemIcon","logo","ListItemText","text","dataType","getCellValue","weekEnding","date","Date","isNaN","getTime","year","getFullYear","getMonth","padStart","getDate","join","e","pageSizes","SalesTable","rows","useMemo","sales","sale","useState","pageSize","setPageSize","currentPage","setCurrentPage","plugins","push","onPageSizeChange","onCurrentPageChange","defaultCurrentPage","defaultPageSize","showSortingControls","length","columns","plugin","root","display","justifyContent","alignItems","paper","height","Home","useSelector","isSalesDataLoading","dispatch","useDispatch","useEffect","fetch","then","response","json","data","catch","err","console","log","CircularProgress","Grid","container","xs","md","Paper","elevation","appbar","backgroundColor","App","CssBaseline","AppBar","position","Toolbar","configureStore","reducer","salesDataReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.19058a7e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const salesDataSlice = createSlice({\r\n  name: 'salesData',\r\n  initialState: {\r\n    salesData: [],\r\n    loading: true,\r\n  },\r\n  reducers: {\r\n    fetchDataPending: state => {\r\n      state.loading = true;\r\n    },\r\n    fetchDataSuccess: (state, action) => {\r\n      state.loading = false;\r\n      state.salesData = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { fetchDataPending, fetchDataSuccess } = salesDataSlice.actions;\r\n\r\nexport function fetchSalesData() {\r\n  return function (dispatch) {\r\n    dispatch(fetchDataPending());\r\n\r\n    return fetch('Webdev_data2.json')\r\n    .then(response => response.json())\r\n    .then(data => dispatch(fetchDataSuccess(data)))\r\n    .catch(err => console.log(err))\r\n  };\r\n }\r\n\r\n\r\nexport const salesDataLoading = state => state.loading;\r\nexport const stateSalesData = state => state.salesData;\r\n\r\nexport default salesDataSlice.reducer;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport { Box, Divider, List, ListItem, ListItemIcon, ListItemText, makeStyles } from '@material-ui/core';\r\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\r\nimport BarChartOutlinedIcon from '@material-ui/icons/BarChartOutlined';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  image: {\r\n    width: '100%',\r\n  },\r\n  typography:{\r\n    padding: theme.spacing(1, 2, 1, 2)\r\n  },\r\n  chipBorder: {\r\n    borderRadius: '10%',\r\n    margin: theme.spacing()\r\n  },\r\n  iconWidth: {\r\n    minWidth: '32px',\r\n  }\r\n}));\r\n\r\nexport function ProductInfo({salesData}) {\r\n\r\n  const classes = useStyles();\r\n  const navigations = [\r\n    {\r\n      'text': 'OVERVIEW',\r\n      'logo': <HomeOutlinedIcon/>,\r\n    },\r\n    {\r\n      'text': 'SALES',\r\n      'logo': <BarChartOutlinedIcon/>\r\n    }\r\n  ];\r\n\r\n  return (\r\n  <>\r\n      <Box className=\"image-container\">\r\n        <img src={salesData.image} alt=\"product\" className={classes.image}/>\r\n      <Typography className={classes.typography} align=\"center\" variant=\"h6\">{salesData.title}</Typography>\r\n      <Typography className={classes.typography} align=\"center\" variant=\"subtitle1\" color=\"textSecondary\">{salesData.subtitle}</Typography>\r\n      </Box>\r\n      <Divider />\r\n      <Box m={2}>\r\n      {salesData.tags.map((tag, index) => <Chip className={classes.chipBorder} label={tag} variant=\"outlined\" key={index} />)}\r\n      </Box>\r\n      <Divider />\r\n      <Box>\r\n        <List component=\"nav\">\r\n\r\n        {navigations.map((item, index) => {\r\n          return (\r\n            <ListItem key={index}>\r\n            <ListItemIcon className={classes.iconWidth}>{item.logo}</ListItemIcon>\r\n            <ListItemText>\r\n            <Typography variant=\"subtitle2\">{item.text}</Typography>\r\n            </ListItemText>\r\n          </ListItem>)\r\n        })}\r\n        </List>\r\n      </Box>\r\n  </>\r\n  );\r\n}\r\n\r\nProductInfo.propTypes = {\r\n  salesData: PropTypes.shape(\r\n    {\r\n      id: PropTypes.string,\r\n      title: PropTypes.string,\r\n      image: PropTypes.string,\r\n      subtitle: PropTypes.string,\r\n      brand: PropTypes.string,\r\n      reviews: PropTypes.array,\r\n      retailer: PropTypes.string,\r\n      details: PropTypes.array,\r\n      tags: PropTypes.array,\r\n      sales: PropTypes.array,\r\n    }\r\n  )\r\n};\r\n","export default [\r\n    {\r\n      name: 'weekEnding',\r\n      title: 'WEEK ENDING',\r\n      dataType: 'date',\r\n      getCellValue: ({ weekEnding }) => {\r\n        try {\r\n\r\n        var date = new Date(weekEnding);\r\n        if (!isNaN(date.getTime())) {\r\n\r\n            const year = date.getFullYear()\r\n\r\n            const month = `${date.getMonth() + 1}`.padStart(2, \"0\")\r\n\r\n            const day = `${date.getDate()}`.padStart(2, \"0\")\r\n\r\n            return [month, day, year].join(\"-\")\r\n\r\n        }\r\n        } catch (e) {\r\n          if (weekEnding) {\r\n            return weekEnding;\r\n          }\r\n  \r\n          return 'Invalid date';\r\n        }\r\n      },\r\n    },\r\n    { name: 'retailSales', title: 'RETAIL SALES' },\r\n    { name: 'retailSales', title: 'WHOLESALE SALES' },\r\n    { name: 'unitsSold', title: 'UNITS SOLD' },\r\n    { name: 'retailerMargin', title: 'RETAILER MARGIN' },\r\n  ];\r\n  ","import React, { useState, useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n    SortingState,\r\n    IntegratedSorting,\r\n    PagingState,\r\n    IntegratedPaging,\r\n  } from '@devexpress/dx-react-grid';\r\n  import {\r\n    Grid,\r\n    Table,\r\n    TableHeaderRow,\r\n    PagingPanel,\r\n  } from '@devexpress/dx-react-grid-material-ui';\r\n  import columns from './SalesTable.columns';\r\n  import { Plugin } from \"@devexpress/dx-react-core\";\r\n\r\nconst pageSizes = [10, 20, 30];\r\n\r\nconst SalesTable = ({salesData}) => {\r\n\r\n  const rows = useMemo(\r\n    () =>\r\n    salesData.sales.map((sale, index) => {\r\n      \r\n      return {...sale, index};\r\n    }),\r\n    [salesData.sales],\r\n    );\r\n    \r\n    const [pageSize, setPageSize] = useState(10);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const plugins = [];\r\n    plugins.push(<PagingState\r\n      pageSize={pageSize}\r\n      onPageSizeChange={setPageSize}\r\n      currentPage={currentPage}\r\n      onCurrentPageChange={setCurrentPage}\r\n      defaultCurrentPage={1}\r\n      defaultPageSize={20}\r\n    />);\r\n    plugins.push(<IntegratedPaging />);\r\n    plugins.push(<SortingState />);\r\n    plugins.push(<IntegratedSorting />);\r\n    plugins.push(<Table />);\r\n    plugins.push(<TableHeaderRow showSortingControls/>);\r\n    plugins.push(<PagingPanel pageSizes={pageSizes} />);\r\n    return (\r\n        <Grid key={plugins.length} rows={rows} columns={columns}>\r\n        {plugins.map((plugin, index) => (\r\n            <Plugin key={index}>{plugin}</Plugin>\r\n          ))}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nSalesTable.propTypes = {\r\n    salesData: PropTypes.shape(\r\n      {\r\n        id: PropTypes.string,\r\n        title: PropTypes.string,\r\n        image: PropTypes.string,\r\n        subtitle: PropTypes.string,\r\n        brand: PropTypes.string,\r\n        reviews: PropTypes.array,\r\n        retailer: PropTypes.string,\r\n        details: PropTypes.array,\r\n        tags: PropTypes.array,\r\n        sales: PropTypes.array,\r\n      }\r\n    )\r\n  };\r\n  \r\n\r\nexport default SalesTable;","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  fetchSalesData,\r\n} from './salesDataSlice';\r\nimport { ProductInfo } from '../ProductInfo/ProductInfo';\r\nimport { Box, CircularProgress, Grid, Paper, Typography } from '@material-ui/core';\r\nimport SalesTable from '../SalesTable/SalesTable';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n    },\r\n    paper: {\r\n        height: '100%',\r\n    }\r\n  }));\r\n\r\nexport function Home() {\r\n  const salesData = useSelector(state => state.salesData.salesData);\r\n  const isSalesDataLoading = useSelector(state => state.salesData.loading);\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchSalesData());\r\n  }, []);\r\n\r\n  return (\r\n    <Box m={2}>\r\n        {isSalesDataLoading\r\n        ? <div className={classes.root}>\r\n            <CircularProgress />\r\n              <Typography variant=\"h6\">Loading...</Typography>\r\n         </div>\r\n        :<Grid container spacing={3}>\r\n            <Grid item xs={12} md={3}>\r\n                <Paper elevation={3} className={classes.paper}>\r\n                <ProductInfo salesData={salesData[0]} />\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item xs={12} md={9}>\r\n                <Paper elevation={3} className={classes.paper}>\r\n                    <SalesTable salesData={salesData[0]} />\r\n                </Paper>\r\n            </Grid>\r\n\r\n        </Grid>\r\n    }\r\n    </Box>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Home } from './features/Home/Home';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport './App.css';\r\nimport { Toolbar } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  appbar: {\r\n    backgroundColor: \"white\",\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <CssBaseline />\r\n      <AppBar position=\"static\" className={classes.appbar}>\r\n        <Toolbar>\r\n        <img src=\"stackline_logo.jpg\" alt=\"logo\" className=\"logo\"/>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Home />\r\n    </div>\r\n  );  \r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport salesDataReducer from '../features/Home/salesDataSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    salesData: salesDataReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}